# Use a Debian-based Golang image (without the version-specific tag issue)
ARG GO_VERSION=1.20

FROM docker.io/library/golang:${GO_VERSION}-bullseye AS builder

# Install dependencies (git, sqlite3, build-essential, and sqlite3-dev)
RUN apt-get update && apt-get install -y \
    git \
    sqlite3 \
    build-essential \
    libsqlite3-dev && \
    rm -rf /var/lib/apt/lists/*

# Create the workspace for the Go app
RUN mkdir -p /api
WORKDIR /api

# Copy Go mod files and download dependencies
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy the application source code
COPY . .

# Build the Go application
RUN go build -o ./app ./main.go

# Step 2: Create the production image
FROM debian:bullseye-slim

LABEL org.opencontainers.image.source="https://github.com/kucksdorfs/podgrab"

# Set environment variables
ENV CONFIG=/config
ENV DATA=/assets
ENV UID=998
ENV PID=100
ENV GIN_MODE=release

# Create volumes
VOLUME ["/config", "/assets"]

# Install necessary certificates and dependencies
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Create required directories
RUN mkdir -p /config /assets /api && \
    chmod 777 /config /assets

# Set the working directory and copy the compiled app
WORKDIR /api
COPY --from=builder /api/app .

# Copy other necessary files
COPY client ./client
COPY webassets ./webassets

# Expose port 8080
EXPOSE 8080

# Define the entrypoint
ENTRYPOINT ["./app"]
